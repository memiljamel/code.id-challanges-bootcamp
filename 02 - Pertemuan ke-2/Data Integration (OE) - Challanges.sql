-- SET search_path TO oe, hr;

-- Challanges

-- Task 1 (5 point)

-- #1. Create table & relasinya untuk table bank, users, carts, cart_items & attribute tambahan yang ada di table
--     orders.

-- CREATE NEW TABLE
CREATE TABLE oe.bank(
	bank_code VARCHAR(4) PRIMARY KEY,
	bank_name VARCHAR(55)
);

CREATE TABLE oe.users(
	user_id INTEGER PRIMARY KEY,
	user_name VARCHAR(30),
	user_email VARCHAR(80),
	user_password VARCHAR(125),
	user_handphone VARCHAR(24),
	created_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	UNIQUE (user_email, user_handphone)
);

CREATE TABLE oe.carts(
	cart_id SMALLINT PRIMARY KEY,
	created_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	user_id INTEGER,
	FOREIGN KEY (user_id) REFERENCES oe.users (user_id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE oe.cart_items(
	cart_item_id SMALLINT PRIMARY KEY,
	product_id SMALLINT,
	quantity SMALLINT,
	created_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	cart_id SMALLINT,
	FOREIGN KEY (product_id) REFERENCES oe.products (product_id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (cart_id) REFERENCES oe.carts (cart_id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- UPDATE FIELD ON orders TABLE
CREATE TYPE payment_enum AS ENUM('DEBIT', 'CREDIT', 'QRIS', 'TRANSFER');

ALTER TABLE oe.orders
	ADD COLUMN order_no VARCHAR(15),
	ADD COLUMN total_discount NUMERIC(5, 2),
	ADD COLUMN total_amount NUMERIC(8, 2),
	ADD COLUMN payment_type payment_enum,
	ADD COLUMN card_no VARCHAR(25),
	ADD COLUMN transac_no VARCHAR(25),
	ADD COLUMN transac_date DATE,
	ADD COLUMN ref_no VARCHAR(25),
	-- FOREIGN KEY
	ADD COLUMN location_id INTEGER,
	ADD COLUMN user_id INTEGER,
	ADD COLUMN bank_code VARCHAR(4);

ALTER TABLE oe.orders
	ADD CONSTRAINT order_location_fk 
	FOREIGN KEY (location_id) REFERENCES hr.locations (location_id);

ALTER TABLE oe.orders
	ADD CONSTRAINT order_user_fk 
	FOREIGN KEY (user_id) REFERENCES oe.users (user_id);

ALTER TABLE oe.orders
	ADD CONSTRAINT order_bank_fk 
	FOREIGN KEY (bank_code) REFERENCES oe.bank (bank_code);

-- Task 2 (5 point)

-- #1. Buat link antara table hr.locations dan table oe.orders, dan update kolom location_id di table oe.orders.

ALTER TABLE oe.orders
	ADD CONSTRAINT order_location_fk 
	FOREIGN KEY (location_id) REFERENCES hr.locations (location_id);

UPDATE oe.orders AS o
	SET location_id = (
		SELECT 
			location_id
		FROM oe.location_x l
		WHERE l.street_address = o.ship_address
			AND l.postal_code = o.ship_postal_code
			AND l.country_name = o.ship_country
	);

-- Task 3 (10 point)

-- #1. Pindahkan data employee dari schema oe.employees ke schema hr.employees. Data yang dipindahkan
--     cukup mengikuti kolom yang ada di schema hr.employees.

INSERT INTO hr.employees (employee_id, first_name, last_name, email, hire_date, job_id, salary)
	SELECT 
		-- employee_id,
		ROW_NUMBER() OVER (ORDER BY employee_id) + 3000 AS employee_id,
		first_name, 
		last_name,
		lower(first_name || '.' || last_name || '@sqltutorial.org') AS email,
		hire_date,
		j.job_id,
		0.00 AS salary
	FROM oe.employees
	JOIN (
		SELECT job_id
	    FROM hr.jobs
	    ORDER BY RANDOM()
		LIMIT 1
	) j ON TRUE;

-- #2. Buat relasi antara table hr.employees dengan table oe.orders.

ALTER TABLE oe.orders
	ADD CONSTRAINT fk_orders_employees 
	FOREIGN KEY (employee_id) REFERENCES hr.employees (employee_id);

-- Task 4 (10 point)

-- #1. Create table users di shema oe.

/*
CREATE TABLE oe.users(
	user_id INTEGER PRIMARY KEY,
	user_name VARCHAR(30),
	user_email VARCHAR(80),
	user_password VARCHAR(125),
	user_handphone VARCHAR(24),
	created_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	UNIQUE (user_email, user_handphone)
);
*/

-- #2. Pindahkan data dari table oe.customers ke table users.

CREATE EXTENSION IF NOT EXISTS pgcrypto;

ALTER TABLE oe.users
	ALTER COLUMN user_id ADD GENERATED BY DEFAULT AS IDENTITY;

INSERT INTO oe.users (user_name, user_password, user_handphone) 
	SELECT 
		contact_name AS user_name, 
		crypt(lower(c.customer_id), gen_salt('bf', 12)),
		phone AS user_handphone 
	FROM oe.customers c;

/*
insert into users (user_name,user_email,user_password,user_handphone,created_on)
SELECT
    INITCAP(customer_id) as user_name,
    replace(lower(substring(contact_name,1,position(' ' in contact_name))),' ','')||'@gmail.com' as user_email,
    crypt(lower(customer_id), gen_salt('bf', 12)) as user_password,
    phone as user_phone,
    now() as created_on
FROM CUSTOMERS
WHERE replace(lower(substring(contact_name,1,position(' ' in contact_name))),' ','')||'@gmail.com'
NOT IN ('carlos@gmail.com','elizabeth@gmail.com','maria@gmail.com')
ORDER BY user_email;
*/

-- #3. Buat relasi antara table oe.users dengan table oe.orders.

/*
ALTER TABLE oe.orders
	ADD CONSTRAINT order_user_fk 
	FOREIGN KEY (user_id) REFERENCES oe.users (user_id);
*/

-- #4. Untuk value password gunakan function crypt(). Kolom password diambil dari kolom
--     lower(customer_id). Contoh script:

-- supaya bisa gunakan func crypt(), create extension pgcrypto dulu
-- CREATE EXTENSION IF NOT EXISTS pgcrypto;
 
-- insert data
-- INSERT INTO users (username, password) 
-- VALUES ('john_doe', crypt('MySecureP@ssw0rd', gen_salt('bf', 12)));
 
-- fetch data
-- SELECT crypt('my_secure_password', gen_salt('bf', 12))















